b. Recursive descent parser (Grammar 2)
//recursive2.c 
#include<stdio.h> 
void E();
void T();
void match(char); 
int flag=1;
char ch,t; 
int main()
{
printf("The grammer is\n"); 
printf("E-->x+T\nT-->(E)|x\n");
printf("enter input string and end with dollar\n"); 
scanf("%c",&ch);
E();
if((ch=='$')&&(flag!=0)) 
printf("successful\n"); 
else 
printf("unsuccessful\n");
}
void match(char t)
{
if(ch==t) 
scanf("%c",&ch); 
else 
flag=0;
}
void E()
{
if(ch=='x') {
match('x');
match('+');
T(); }
}
void T()
{
if(ch=='(')
{
match('('); 
E();
match(')');
}
else 
match('x');
}



Output:
$ cc recursive2.c
$ ./a.out 
The grammer is
E-->x+T 
T--
>(E)|x
enter input string and end with dollar 
x+(x+x)$
successful
$ ./a.out 
The grammer is
T-->(E)|x
enter input string and end with dollar 
(x)$
unsuccessful
$ ./a.out 
The grammer is
E-->x+T 
T--
>(E)|x
enter input string and end with dollar 
x+x$
successful
